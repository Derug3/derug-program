/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { DeruggerCreator, deruggerCreatorBeet } from '../types/DeruggerCreator'

/**
 * Arguments used to create {@link RemintConfig}
 * @category Accounts
 * @category generated
 */
export type RemintConfigArgs = {
  derugRequest: web3.PublicKey
  newName: string
  newSymbol: string
  authority: web3.PublicKey
  collection: web3.PublicKey
  publicMintPrice: beet.COption<beet.bignum>
  mintCurrency: beet.COption<web3.PublicKey>
  mintFeeTreasury: beet.COption<web3.PublicKey>
  privateMintEnd: beet.COption<beet.bignum>
  creators: DeruggerCreator[]
  walletLimit: beet.COption<number>
  candyMachineKey: web3.PublicKey
  candyMachineCreator: web3.PublicKey
  sellerFeeBps: number
}

export const remintConfigDiscriminator = [218, 182, 67, 42, 83, 225, 162, 187]
/**
 * Holds the data for the {@link RemintConfig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class RemintConfig implements RemintConfigArgs {
  private constructor(
    readonly derugRequest: web3.PublicKey,
    readonly newName: string,
    readonly newSymbol: string,
    readonly authority: web3.PublicKey,
    readonly collection: web3.PublicKey,
    readonly publicMintPrice: beet.COption<beet.bignum>,
    readonly mintCurrency: beet.COption<web3.PublicKey>,
    readonly mintFeeTreasury: beet.COption<web3.PublicKey>,
    readonly privateMintEnd: beet.COption<beet.bignum>,
    readonly creators: DeruggerCreator[],
    readonly walletLimit: beet.COption<number>,
    readonly candyMachineKey: web3.PublicKey,
    readonly candyMachineCreator: web3.PublicKey,
    readonly sellerFeeBps: number
  ) {}

  /**
   * Creates a {@link RemintConfig} instance from the provided args.
   */
  static fromArgs(args: RemintConfigArgs) {
    return new RemintConfig(
      args.derugRequest,
      args.newName,
      args.newSymbol,
      args.authority,
      args.collection,
      args.publicMintPrice,
      args.mintCurrency,
      args.mintFeeTreasury,
      args.privateMintEnd,
      args.creators,
      args.walletLimit,
      args.candyMachineKey,
      args.candyMachineCreator,
      args.sellerFeeBps
    )
  }

  /**
   * Deserializes the {@link RemintConfig} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [RemintConfig, number] {
    return RemintConfig.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link RemintConfig} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<RemintConfig> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find RemintConfig account at ${address}`)
    }
    return RemintConfig.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'DERUGwXJu3m1DG1VNq4gP7Ppkza95P7XbeujbtSNAebu'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, remintConfigBeet)
  }

  /**
   * Deserializes the {@link RemintConfig} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [RemintConfig, number] {
    return remintConfigBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link RemintConfig} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return remintConfigBeet.serialize({
      accountDiscriminator: remintConfigDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link RemintConfig} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: RemintConfigArgs) {
    const instance = RemintConfig.fromArgs(args)
    return remintConfigBeet.toFixedFromValue({
      accountDiscriminator: remintConfigDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link RemintConfig} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: RemintConfigArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      RemintConfig.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link RemintConfig} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      derugRequest: this.derugRequest.toBase58(),
      newName: this.newName,
      newSymbol: this.newSymbol,
      authority: this.authority.toBase58(),
      collection: this.collection.toBase58(),
      publicMintPrice: this.publicMintPrice,
      mintCurrency: this.mintCurrency,
      mintFeeTreasury: this.mintFeeTreasury,
      privateMintEnd: this.privateMintEnd,
      creators: this.creators,
      walletLimit: this.walletLimit,
      candyMachineKey: this.candyMachineKey.toBase58(),
      candyMachineCreator: this.candyMachineCreator.toBase58(),
      sellerFeeBps: this.sellerFeeBps,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const remintConfigBeet = new beet.FixableBeetStruct<
  RemintConfig,
  RemintConfigArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['derugRequest', beetSolana.publicKey],
    ['newName', beet.utf8String],
    ['newSymbol', beet.utf8String],
    ['authority', beetSolana.publicKey],
    ['collection', beetSolana.publicKey],
    ['publicMintPrice', beet.coption(beet.u64)],
    ['mintCurrency', beet.coption(beetSolana.publicKey)],
    ['mintFeeTreasury', beet.coption(beetSolana.publicKey)],
    ['privateMintEnd', beet.coption(beet.i64)],
    ['creators', beet.array(deruggerCreatorBeet)],
    ['walletLimit', beet.coption(beet.u8)],
    ['candyMachineKey', beetSolana.publicKey],
    ['candyMachineCreator', beetSolana.publicKey],
    ['sellerFeeBps', beet.u32],
  ],
  RemintConfig.fromArgs,
  'RemintConfig'
)
