/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { RequestStatus, requestStatusBeet } from '../types/RequestStatus'
import { DeruggerCreator, deruggerCreatorBeet } from '../types/DeruggerCreator'
import { MintConfig, mintConfigBeet } from '../types/MintConfig'

/**
 * Arguments used to create {@link DerugRequest}
 * @category Accounts
 * @category generated
 */
export type DerugRequestArgs = {
  derugData: web3.PublicKey
  newName: string
  newSymbol: string
  derugger: web3.PublicKey
  createdAt: beet.bignum
  voteCount: number
  requestStatus: RequestStatus
  creators: DeruggerCreator[]
  mintConfig: MintConfig
}

export const derugRequestDiscriminator = [245, 198, 17, 39, 180, 237, 220, 216]
/**
 * Holds the data for the {@link DerugRequest} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class DerugRequest implements DerugRequestArgs {
  private constructor(
    readonly derugData: web3.PublicKey,
    readonly newName: string,
    readonly newSymbol: string,
    readonly derugger: web3.PublicKey,
    readonly createdAt: beet.bignum,
    readonly voteCount: number,
    readonly requestStatus: RequestStatus,
    readonly creators: DeruggerCreator[],
    readonly mintConfig: MintConfig
  ) {}

  /**
   * Creates a {@link DerugRequest} instance from the provided args.
   */
  static fromArgs(args: DerugRequestArgs) {
    return new DerugRequest(
      args.derugData,
      args.newName,
      args.newSymbol,
      args.derugger,
      args.createdAt,
      args.voteCount,
      args.requestStatus,
      args.creators,
      args.mintConfig
    )
  }

  /**
   * Deserializes the {@link DerugRequest} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [DerugRequest, number] {
    return DerugRequest.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link DerugRequest} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<DerugRequest> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find DerugRequest account at ${address}`)
    }
    return DerugRequest.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'DERUGwXJu3m1DG1VNq4gP7Ppkza95P7XbeujbtSNAebu'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, derugRequestBeet)
  }

  /**
   * Deserializes the {@link DerugRequest} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [DerugRequest, number] {
    return derugRequestBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link DerugRequest} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return derugRequestBeet.serialize({
      accountDiscriminator: derugRequestDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link DerugRequest} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: DerugRequestArgs) {
    const instance = DerugRequest.fromArgs(args)
    return derugRequestBeet.toFixedFromValue({
      accountDiscriminator: derugRequestDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link DerugRequest} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: DerugRequestArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      DerugRequest.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link DerugRequest} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      derugData: this.derugData.toBase58(),
      newName: this.newName,
      newSymbol: this.newSymbol,
      derugger: this.derugger.toBase58(),
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      voteCount: this.voteCount,
      requestStatus: 'RequestStatus.' + RequestStatus[this.requestStatus],
      creators: this.creators,
      mintConfig: this.mintConfig,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const derugRequestBeet = new beet.FixableBeetStruct<
  DerugRequest,
  DerugRequestArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['derugData', beetSolana.publicKey],
    ['newName', beet.utf8String],
    ['newSymbol', beet.utf8String],
    ['derugger', beetSolana.publicKey],
    ['createdAt', beet.i64],
    ['voteCount', beet.u32],
    ['requestStatus', requestStatusBeet],
    ['creators', beet.array(deruggerCreatorBeet)],
    ['mintConfig', mintConfigBeet],
  ],
  DerugRequest.fromArgs,
  'DerugRequest'
)
