/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { DerugStatus, derugStatusBeet } from '../types/DerugStatus'
import { ActiveRequest, activeRequestBeet } from '../types/ActiveRequest'

/**
 * Arguments used to create {@link DerugData}
 * @category Accounts
 * @category generated
 */
export type DerugDataArgs = {
  slug: string
  collection: web3.PublicKey
  rugUpdateAuthority: web3.PublicKey
  collectionMetadata: beet.COption<web3.PublicKey>
  totalSupply: number
  newCollection: beet.COption<web3.PublicKey>
  thresholdDenominator: number
  dateAdded: beet.bignum
  derugStatus: DerugStatus
  periodEnd: beet.bignum
  totalReminted: number
  winningRequest: beet.COption<web3.PublicKey>
  totalSuggestionCount: number
  collectionName: string
  collectionSymbol: string
  collectionUri: string
  activeRequests: ActiveRequest[]
}

export const derugDataDiscriminator = [108, 28, 176, 247, 48, 212, 24, 49]
/**
 * Holds the data for the {@link DerugData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class DerugData implements DerugDataArgs {
  private constructor(
    readonly slug: string,
    readonly collection: web3.PublicKey,
    readonly rugUpdateAuthority: web3.PublicKey,
    readonly collectionMetadata: beet.COption<web3.PublicKey>,
    readonly totalSupply: number,
    readonly newCollection: beet.COption<web3.PublicKey>,
    readonly thresholdDenominator: number,
    readonly dateAdded: beet.bignum,
    readonly derugStatus: DerugStatus,
    readonly periodEnd: beet.bignum,
    readonly totalReminted: number,
    readonly winningRequest: beet.COption<web3.PublicKey>,
    readonly totalSuggestionCount: number,
    readonly collectionName: string,
    readonly collectionSymbol: string,
    readonly collectionUri: string,
    readonly activeRequests: ActiveRequest[]
  ) {}

  /**
   * Creates a {@link DerugData} instance from the provided args.
   */
  static fromArgs(args: DerugDataArgs) {
    return new DerugData(
      args.slug,
      args.collection,
      args.rugUpdateAuthority,
      args.collectionMetadata,
      args.totalSupply,
      args.newCollection,
      args.thresholdDenominator,
      args.dateAdded,
      args.derugStatus,
      args.periodEnd,
      args.totalReminted,
      args.winningRequest,
      args.totalSuggestionCount,
      args.collectionName,
      args.collectionSymbol,
      args.collectionUri,
      args.activeRequests
    )
  }

  /**
   * Deserializes the {@link DerugData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [DerugData, number] {
    return DerugData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link DerugData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<DerugData> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find DerugData account at ${address}`)
    }
    return DerugData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'DERUGwXJu3m1DG1VNq4gP7Ppkza95P7XbeujbtSNAebu'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, derugDataBeet)
  }

  /**
   * Deserializes the {@link DerugData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [DerugData, number] {
    return derugDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link DerugData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return derugDataBeet.serialize({
      accountDiscriminator: derugDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link DerugData} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: DerugDataArgs) {
    const instance = DerugData.fromArgs(args)
    return derugDataBeet.toFixedFromValue({
      accountDiscriminator: derugDataDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link DerugData} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: DerugDataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      DerugData.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link DerugData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      slug: this.slug,
      collection: this.collection.toBase58(),
      rugUpdateAuthority: this.rugUpdateAuthority.toBase58(),
      collectionMetadata: this.collectionMetadata,
      totalSupply: this.totalSupply,
      newCollection: this.newCollection,
      thresholdDenominator: this.thresholdDenominator,
      dateAdded: (() => {
        const x = <{ toNumber: () => number }>this.dateAdded
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      derugStatus: 'DerugStatus.' + DerugStatus[this.derugStatus],
      periodEnd: (() => {
        const x = <{ toNumber: () => number }>this.periodEnd
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      totalReminted: this.totalReminted,
      winningRequest: this.winningRequest,
      totalSuggestionCount: this.totalSuggestionCount,
      collectionName: this.collectionName,
      collectionSymbol: this.collectionSymbol,
      collectionUri: this.collectionUri,
      activeRequests: this.activeRequests,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const derugDataBeet = new beet.FixableBeetStruct<
  DerugData,
  DerugDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['slug', beet.utf8String],
    ['collection', beetSolana.publicKey],
    ['rugUpdateAuthority', beetSolana.publicKey],
    ['collectionMetadata', beet.coption(beetSolana.publicKey)],
    ['totalSupply', beet.u32],
    ['newCollection', beet.coption(beetSolana.publicKey)],
    ['thresholdDenominator', beet.u8],
    ['dateAdded', beet.i64],
    ['derugStatus', derugStatusBeet],
    ['periodEnd', beet.i64],
    ['totalReminted', beet.u32],
    ['winningRequest', beet.coption(beetSolana.publicKey)],
    ['totalSuggestionCount', beet.u8],
    ['collectionName', beet.utf8String],
    ['collectionSymbol', beet.utf8String],
    ['collectionUri', beet.utf8String],
    ['activeRequests', beet.array(activeRequestBeet)],
  ],
  DerugData.fromArgs,
  'DerugData'
)
