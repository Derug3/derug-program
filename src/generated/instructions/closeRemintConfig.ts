/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CloseRemintConfig
 * @category generated
 */
export const closeRemintConfigStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CloseRemintConfigInstructionArgs'
)
/**
 * Accounts required by the _closeRemintConfig_ instruction
 *
 * @property [_writable_] remintConfg
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CloseRemintConfig
 * @category generated
 */
export type CloseRemintConfigInstructionAccounts = {
  remintConfg: web3.PublicKey
  payer: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const closeRemintConfigInstructionDiscriminator = [
  239, 114, 95, 46, 204, 227, 52, 6,
]

/**
 * Creates a _CloseRemintConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CloseRemintConfig
 * @category generated
 */
export function createCloseRemintConfigInstruction(
  accounts: CloseRemintConfigInstructionAccounts,
  programId = new web3.PublicKey('DERUGwXJu3m1DG1VNq4gP7Ppkza95P7XbeujbtSNAebu')
) {
  const [data] = closeRemintConfigStruct.serialize({
    instructionDiscriminator: closeRemintConfigInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.remintConfg,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
