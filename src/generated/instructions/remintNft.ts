/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RemintNft
 * @category generated
 */
export type RemintNftInstructionArgs = {
  newName: string
  newUri: string
}
/**
 * @category Instructions
 * @category RemintNft
 * @category generated
 */
export const remintNftStruct = new beet.FixableBeetArgsStruct<
  RemintNftInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['newName', beet.utf8String],
    ['newUri', beet.utf8String],
  ],
  'RemintNftInstructionArgs'
)
/**
 * Accounts required by the _remintNft_ instruction
 *
 * @property [] derugRequest
 * @property [_writable_] derugData
 * @property [] newCollection
 * @property [_writable_] remintProof
 * @property [] oldCollection
 * @property [_writable_] oldMint
 * @property [_writable_, **signer**] newMint
 * @property [_writable_] oldToken
 * @property [_writable_, **signer**] newToken
 * @property [_writable_] oldMetadata
 * @property [_writable_] newMetadata
 * @property [] firstCreator
 * @property [_writable_] oldEdition
 * @property [_writable_] newEdition
 * @property [] pdaAuthority
 * @property [] collectionMint
 * @property [] collectionMetadata
 * @property [] collectionMasterEdition
 * @property [_writable_, **signer**] payer
 * @property [_writable_] feeWallet
 * @property [] metadataProgram
 * @category Instructions
 * @category RemintNft
 * @category generated
 */
export type RemintNftInstructionAccounts = {
  derugRequest: web3.PublicKey
  derugData: web3.PublicKey
  newCollection: web3.PublicKey
  remintProof: web3.PublicKey
  oldCollection: web3.PublicKey
  oldMint: web3.PublicKey
  newMint: web3.PublicKey
  oldToken: web3.PublicKey
  newToken: web3.PublicKey
  oldMetadata: web3.PublicKey
  newMetadata: web3.PublicKey
  firstCreator: web3.PublicKey
  oldEdition: web3.PublicKey
  newEdition: web3.PublicKey
  pdaAuthority: web3.PublicKey
  collectionMint: web3.PublicKey
  collectionMetadata: web3.PublicKey
  collectionMasterEdition: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  feeWallet: web3.PublicKey
  metadataProgram: web3.PublicKey
  rent?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const remintNftInstructionDiscriminator = [
  91, 23, 213, 37, 105, 35, 10, 205,
]

/**
 * Creates a _RemintNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RemintNft
 * @category generated
 */
export function createRemintNftInstruction(
  accounts: RemintNftInstructionAccounts,
  args: RemintNftInstructionArgs,
  programId = new web3.PublicKey('DERUGwXJu3m1DG1VNq4gP7Ppkza95P7XbeujbtSNAebu')
) {
  const [data] = remintNftStruct.serialize({
    instructionDiscriminator: remintNftInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.derugRequest,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.derugData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newCollection,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.remintProof,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.oldCollection,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.oldMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newMint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.oldToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newToken,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.oldMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.firstCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.oldEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.newEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.pdaAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionMasterEdition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.feeWallet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
