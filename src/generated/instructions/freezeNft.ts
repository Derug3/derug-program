/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FreezeNft
 * @category generated
 */
export const freezeNftStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'FreezeNftInstructionArgs'
)
/**
 * Accounts required by the _freezeNft_ instruction
 *
 * @property [_writable_] nftMint
 * @property [_writable_] nftMasterEdition
 * @property [_writable_] delegate
 * @property [_writable_] nftTokenAccount
 * @property [_writable_, **signer**] payer
 * @property [] metaplexProgram
 * @category Instructions
 * @category FreezeNft
 * @category generated
 */
export type FreezeNftInstructionAccounts = {
  nftMint: web3.PublicKey
  nftMasterEdition: web3.PublicKey
  delegate: web3.PublicKey
  nftTokenAccount: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  metaplexProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const freezeNftInstructionDiscriminator = [
  138, 89, 228, 134, 233, 179, 225, 209,
]

/**
 * Creates a _FreezeNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category FreezeNft
 * @category generated
 */
export function createFreezeNftInstruction(
  accounts: FreezeNftInstructionAccounts,
  programId = new web3.PublicKey('DERUGwXJu3m1DG1VNq4gP7Ppkza95P7XbeujbtSNAebu')
) {
  const [data] = freezeNftStruct.serialize({
    instructionDiscriminator: freezeNftInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.nftMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nftMasterEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.delegate,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nftTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metaplexProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
