/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { DeruggerCreator, deruggerCreatorBeet } from '../types/DeruggerCreator'
import { MintConfig, mintConfigBeet } from '../types/MintConfig'

/**
 * @category Instructions
 * @category CreateOrUpdateDerugRequest
 * @category generated
 */
export type CreateOrUpdateDerugRequestInstructionArgs = {
  newName: string
  newSymbol: string
  creators: DeruggerCreator[]
  mintConfig: MintConfig
}
/**
 * @category Instructions
 * @category CreateOrUpdateDerugRequest
 * @category generated
 */
export const createOrUpdateDerugRequestStruct = new beet.FixableBeetArgsStruct<
  CreateOrUpdateDerugRequestInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['newName', beet.utf8String],
    ['newSymbol', beet.utf8String],
    ['creators', beet.array(deruggerCreatorBeet)],
    ['mintConfig', mintConfigBeet],
  ],
  'CreateOrUpdateDerugRequestInstructionArgs'
)
/**
 * Accounts required by the _createOrUpdateDerugRequest_ instruction
 *
 * @property [_writable_] derugRequest
 * @property [_writable_] derugData
 * @property [_writable_, **signer**] payer
 * @property [_writable_] feeWallet
 * @category Instructions
 * @category CreateOrUpdateDerugRequest
 * @category generated
 */
export type CreateOrUpdateDerugRequestInstructionAccounts = {
  derugRequest: web3.PublicKey
  derugData: web3.PublicKey
  payer: web3.PublicKey
  feeWallet: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createOrUpdateDerugRequestInstructionDiscriminator = [
  197, 117, 35, 91, 20, 39, 35, 182,
]

/**
 * Creates a _CreateOrUpdateDerugRequest_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateOrUpdateDerugRequest
 * @category generated
 */
export function createCreateOrUpdateDerugRequestInstruction(
  accounts: CreateOrUpdateDerugRequestInstructionAccounts,
  args: CreateOrUpdateDerugRequestInstructionArgs,
  programId = new web3.PublicKey('DERUGwXJu3m1DG1VNq4gP7Ppkza95P7XbeujbtSNAebu')
) {
  const [data] = createOrUpdateDerugRequestStruct.serialize({
    instructionDiscriminator:
      createOrUpdateDerugRequestInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.derugRequest,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.derugData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.feeWallet,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
