/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * RuggerSigner: 'This wallet rugged the collection'
 *
 * @category Errors
 * @category generated
 */
export class RuggerSignerError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'RuggerSigner'
  constructor() {
    super('This wallet rugged the collection')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, RuggerSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new RuggerSignerError())
createErrorFromNameLookup.set('RuggerSigner', () => new RuggerSignerError())

/**
 * InvalidVoteRecord: 'Vote record seeds aren't correct'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoteRecordError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidVoteRecord'
  constructor() {
    super("Vote record seeds aren't correct")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoteRecordError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidVoteRecordError())
createErrorFromNameLookup.set(
  'InvalidVoteRecord',
  () => new InvalidVoteRecordError()
)

/**
 * InvalidTokenAccountMint: 'Token account is not correct for the mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountMintError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidTokenAccountMint'
  constructor() {
    super('Token account is not correct for the mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenAccountMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidTokenAccountMintError())
createErrorFromNameLookup.set(
  'InvalidTokenAccountMint',
  () => new InvalidTokenAccountMintError()
)

/**
 * InvalidMetadata: 'Metadata is not correct for the mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMetadataError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidMetadata'
  constructor() {
    super('Metadata is not correct for the mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidMetadataError())
createErrorFromNameLookup.set(
  'InvalidMetadata',
  () => new InvalidMetadataError()
)

/**
 * EmptyTokenAccount: 'Token account doesn't possess the nft'
 *
 * @category Errors
 * @category generated
 */
export class EmptyTokenAccountError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'EmptyTokenAccount'
  constructor() {
    super("Token account doesn't possess the nft")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EmptyTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new EmptyTokenAccountError())
createErrorFromNameLookup.set(
  'EmptyTokenAccount',
  () => new EmptyTokenAccountError()
)

/**
 * WrongOwner: 'Payer doesn't own the token account'
 *
 * @category Errors
 * @category generated
 */
export class WrongOwnerError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'WrongOwner'
  constructor() {
    super("Payer doesn't own the token account")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new WrongOwnerError())
createErrorFromNameLookup.set('WrongOwner', () => new WrongOwnerError())

/**
 * AlereadyVoted: 'User alredy voted with given nft'
 *
 * @category Errors
 * @category generated
 */
export class AlereadyVotedError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'AlereadyVoted'
  constructor() {
    super('User alredy voted with given nft')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlereadyVotedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new AlereadyVotedError())
createErrorFromNameLookup.set('AlereadyVoted', () => new AlereadyVotedError())

/**
 * WrongDerugger: 'Signer isn't the required derugger'
 *
 * @category Errors
 * @category generated
 */
export class WrongDeruggerError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'WrongDerugger'
  constructor() {
    super("Signer isn't the required derugger")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongDeruggerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new WrongDeruggerError())
createErrorFromNameLookup.set('WrongDerugger', () => new WrongDeruggerError())

/**
 * InvalidWinningRequest: 'Request isn't the winning one'
 *
 * @category Errors
 * @category generated
 */
export class InvalidWinningRequestError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidWinningRequest'
  constructor() {
    super("Request isn't the winning one")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidWinningRequestError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidWinningRequestError())
createErrorFromNameLookup.set(
  'InvalidWinningRequest',
  () => new InvalidWinningRequestError()
)

/**
 * TimeIsOut: 'You cannot make requests anymore'
 *
 * @category Errors
 * @category generated
 */
export class TimeIsOutError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'TimeIsOut'
  constructor() {
    super('You cannot make requests anymore')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TimeIsOutError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new TimeIsOutError())
createErrorFromNameLookup.set('TimeIsOut', () => new TimeIsOutError())

/**
 * NoWinner: 'There is no winner yet'
 *
 * @category Errors
 * @category generated
 */
export class NoWinnerError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'NoWinner'
  constructor() {
    super('There is no winner yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoWinnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new NoWinnerError())
createErrorFromNameLookup.set('NoWinner', () => new NoWinnerError())

/**
 * CandyMachineUsed: 'This is not a new candy machine'
 *
 * @category Errors
 * @category generated
 */
export class CandyMachineUsedError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'CandyMachineUsed'
  constructor() {
    super('This is not a new candy machine')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CandyMachineUsedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new CandyMachineUsedError())
createErrorFromNameLookup.set(
  'CandyMachineUsed',
  () => new CandyMachineUsedError()
)

/**
 * InvalidStatus: 'Derug isn't in the required state'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStatusError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'InvalidStatus'
  constructor() {
    super("Derug isn't in the required state")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStatusError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new InvalidStatusError())
createErrorFromNameLookup.set('InvalidStatus', () => new InvalidStatusError())

/**
 * WrongCollection: 'Wrong collection sent '
 *
 * @category Errors
 * @category generated
 */
export class WrongCollectionError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'WrongCollection'
  constructor() {
    super('Wrong collection sent ')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x177d, () => new WrongCollectionError())
createErrorFromNameLookup.set(
  'WrongCollection',
  () => new WrongCollectionError()
)

/**
 * InvalidSellerFeeBps: 'Invalid seller fee basis points amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSellerFeeBpsError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'InvalidSellerFeeBps'
  constructor() {
    super('Invalid seller fee basis points amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSellerFeeBpsError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new InvalidSellerFeeBpsError())
createErrorFromNameLookup.set(
  'InvalidSellerFeeBps',
  () => new InvalidSellerFeeBpsError()
)

/**
 * InvalidMintCurrency: 'Invalid mint currency'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintCurrencyError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'InvalidMintCurrency'
  constructor() {
    super('Invalid mint currency')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintCurrencyError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new InvalidMintCurrencyError())
createErrorFromNameLookup.set(
  'InvalidMintCurrency',
  () => new InvalidMintCurrencyError()
)

/**
 * InvalidTokenOwner: 'Invalid token owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenOwnerError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'InvalidTokenOwner'
  constructor() {
    super('Invalid token owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new InvalidTokenOwnerError())
createErrorFromNameLookup.set(
  'InvalidTokenOwner',
  () => new InvalidTokenOwnerError()
)

/**
 * TooManyCreators: 'Too many creators'
 *
 * @category Errors
 * @category generated
 */
export class TooManyCreatorsError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'TooManyCreators'
  constructor() {
    super('Too many creators')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooManyCreatorsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new TooManyCreatorsError())
createErrorFromNameLookup.set(
  'TooManyCreators',
  () => new TooManyCreatorsError()
)

/**
 * PrivateMintEnded: 'Private mint ended'
 *
 * @category Errors
 * @category generated
 */
export class PrivateMintEndedError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'PrivateMintEnded'
  constructor() {
    super('Private mint ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PrivateMintEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1782, () => new PrivateMintEndedError())
createErrorFromNameLookup.set(
  'PrivateMintEnded',
  () => new PrivateMintEndedError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
